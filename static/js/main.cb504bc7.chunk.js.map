{"version":3,"sources":["components/LazyLoad/index.js","container/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["LazyLoad","src","alt","React","imageSrc","setImageSrc","imageRef","setImageRef","observer","IntersectionObserver","entries","forEach","entry","intersectionRatio","isIntersecting","unobserve","threshold","rootMargin","observe","className","ref","onLoad","event","target","classList","add","onError","getImages","count","urls","Promise","resolve","reject","i","push","App","useState","images","setImages","useEffect","a","result","fetch","Fragment","map","image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAkDeA,G,MAhDE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IAAU,EACDC,WAAe,IADd,mBAC1BC,EAD0B,KAChBC,EADgB,OAEDF,WAAe,IAFd,mBAE1BG,EAF0B,KAEhBC,EAFgB,KAoCjC,OAxBAJ,aAAgB,WACd,IACIK,EACAF,GAAYF,IAAaH,IAC3BO,EAAW,IAAIC,sBACb,SAACC,GACCA,EAAQC,SAAQ,SAACC,IAGZA,EAAMC,kBAAoB,GAAKD,EAAME,kBAEtCT,EAAYJ,GACZO,EAASO,UAAUT,SAIzB,CACEU,UAAW,IACXC,WAAY,SAGPC,QAAQZ,KAElB,CAACL,EAAKG,EAAUE,IAEjB,uBACEa,UAAU,QACVC,IAAKb,EACLN,IAAKG,EACLF,IAAKA,EACLmB,OAtCkB,SAACC,GACrBA,EAAMC,OAAOC,UAAUC,IAAI,YAsCzBC,QAnCgB,SAACJ,GACnBA,EAAMC,OAAOC,UAAUC,IAAI,cCNzBE,EAAuB,SAACC,GAC5B,IAAMC,EAAsB,GAO5B,OANc,IAAIC,SAAkB,SAACC,EAASC,GAC5C,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOK,IACzBJ,EAAKK,KAAL,mCAAsCD,EAAtC,aAEFF,EAAQF,OAuBGM,MAnBf,WAAgB,IAAD,EACehC,IAAMiC,SAAmB,IADxC,mBACNC,EADM,KACEC,EADF,KAUb,OARAnC,IAAMoC,WAAU,YACH,uCAAG,4BAAAC,EAAA,sEACSb,EAAU,KADnB,OACNc,EADM,OAEZH,EAAUG,GAFE,2CAAH,qDAIXC,KACC,IAGD,kBAAC,IAAMC,SAAP,KACGN,EAAOO,KAAI,SAACC,GACX,OAAO,kBAAC,EAAD,CAAU5C,IAAK4C,EAAO3C,IAAI,eChBrB4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cb504bc7.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport \"./index.css\";\r\nconst LazyLoad = ({ src, alt }) => {\r\n  const [imageSrc, setImageSrc] = React.useState(\"\");\r\n  const [imageRef, setImageRef] = React.useState(\"\");\r\n\r\n  const handleLoading = (event) => {\r\n    event.target.classList.add(\"loading\");\r\n  };\r\n\r\n  const handleError = (event) => {\r\n    event.target.classList.add(\"error\");\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    let isIgnore = false;\r\n    let observer;\r\n    if (imageRef && imageSrc !== src) {\r\n      observer = new IntersectionObserver(\r\n        (entries) => {\r\n          entries.forEach((entry) => {\r\n            if (\r\n              !isIgnore &&\r\n              (entry.intersectionRatio > 0 || entry.isIntersecting)\r\n            ) {\r\n              setImageSrc(src);\r\n              observer.unobserve(imageRef);\r\n            }\r\n          });\r\n        },\r\n        {\r\n          threshold: 0.01,\r\n          rootMargin: \"75%\",\r\n        }\r\n      );\r\n      observer.observe(imageRef);\r\n    }\r\n  }, [src, imageSrc, imageRef]);\r\n  return (\r\n    <img\r\n      className=\"image\"\r\n      ref={setImageRef}\r\n      src={imageSrc}\r\n      alt={alt}\r\n      onLoad={handleLoading}\r\n      onError={handleError}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LazyLoad;\r\n","import React from \"react\";\nimport LazyLoad from \"../../components/LazyLoad/index\";\n\ntype GetImages = (count: number) => Promise<string[]>;\n\nconst getImages: GetImages = (count) => {\n  const urls: Array<string> = [];\n  const fetch = new Promise<string[]>((resolve, reject) => {\n    for (let i = 0; i < count; i++) {\n      urls.push(`https://picsum.photos/id/${i}/200/200`);\n    }\n    resolve(urls);\n  });\n  return fetch;\n};\nfunction App() {\n  const [images, setImages] = React.useState<string[]>([]);\n  React.useEffect(() => {\n    const fetch = async () => {\n      const result = await getImages(500);\n      setImages(result);\n    };\n    fetch();\n  }, []);\n\n  return (\n    <React.Fragment>\n      {images.map((image) => {\n        return <LazyLoad src={image} alt=\"image\" />;\n      })}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./container/App/index\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}